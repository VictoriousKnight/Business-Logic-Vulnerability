from flask import (
    Flask,
    render_template,
    request,
    jsonify,
    session,
    redirect,
    url_for,
    flash,
)

# from bson.objectid import ObjectId
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired
from pymongo import MongoClient
from dotenv import load_dotenv
import os

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY")

client = MongoClient(os.getenv("MONGODB_CONNECTION_STRING"))
db = client[os.getenv("DATABASE_NAME")]
users_collection = db["login_creds"]
products_collection = db["lab_data"]


# Login form class
class LoginForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired()])
    password = PasswordField("Password", validators=[DataRequired()])
    submit = SubmitField("Login")


@app.route("/")
def index():
    user_balance = session.get("user_balance", None)
    return render_template("index.html", user_balance=user_balance)


@app.route("/login", methods=["GET", "POST"])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data
        user = users_collection.find_one({"username": username})
        if user and user["password"] == password:
            session["user"] = username
            session["user_balance"] = user.get("balance", 0)
            flash("Login successful!", "success")
            return redirect(url_for("index"))
        else:
            flash("Invalid credentials. Please try again.", "error")
            return render_template("login.html", form=form, error="Invalid credentials")
    return render_template("login.html", form=form)


@app.route("/logout")
def logout():
    session.pop("user", None)
    session.pop("cart", None)
    session.pop("user_balance", None)
    flash("Logout successful!", "info")
    return redirect(url_for("index"))


@app.route("/products")
def show_products():
    if "user" not in session:
        return redirect(url_for("login"))

    products = products_collection.find()  # Retrieve all products from MongoDB

    return render_template("products.html", products=products)


@app.route("/add_to_cart", methods=["POST"])
def add_to_cart():
    if session.get("user") is None:
        flash("You must be logged in to perform this action.", "error")
        return jsonify({"error": "User not logged in."}), 401

    product_id = request.form.get("productId")

    if not product_id:
        return jsonify({"error": "Invalid product ID format."}), 400

    product = products_collection.find_one({"id": product_id})

    if product:
        if "cart" not in session:
            session["cart"] = []

        existing_product = next(
            (item for item in session["cart"] if item["id"] == str(product_id)),
            None,
        )
        if existing_product:
            existing_product["quantity"] = max(existing_product["quantity"] + 1, 1)
            existing_product["total_price"] = (
                existing_product["quantity"] * existing_product["original_price"]
            )
        else:
            product_data = {
                "id": product["id"],
                "name": product["name"],
                "original_price": product["price"],
                "total_price": product["price"],
                "quantity": 1,
            }
            session["cart"].append(product_data)

        session.modified = True
        return jsonify({"message": "Product added to cart."}), 200
    else:
        return jsonify({"error": "Product not found."}), 404


@app.route("/cart")
def cart():
    if "user" not in session:
        flash("You must be logged in to view your cart.", "error")
        return redirect(url_for("login"))

    cart_items = session.get("cart", [])
    total_price = sum(item["total_price"] for item in cart_items)
    user_balance = session.get("user_balance", 0)

    return render_template(
        "cart.html",
        cart_items=cart_items,
        total_price=total_price,
        user_balance=user_balance,
    )


@app.route("/remove_from_cart", methods=["POST"])
def remove_from_cart():
    if "user" not in session:
        flash("You must be logged in to view your cart.", "error")
        return redirect(url_for("login"))

    product_id = request.form.get("productId")
    print(f"Attempting to remove product with ID: {product_id}")

    if "cart" in session:
        print(f"Cart before removal: {session['cart']}")

        for item in session["cart"]:
            if item["id"] == product_id:
                if item["quantity"] > 1:
                    item["quantity"] -= 1
                    item["total_price"] = item["total_price"] / 2
                else:
                    item["quantity"] = 0
                    item["total_price"] = 0

                session.modified = True
                print(
                    f"Decremented quantity for product ID: {product_id}. New quantity: {item['quantity']}"
                )

                return jsonify({"message": "Product removed from cart."}), 200

        print("Product not found in cart.")
        return jsonify({"error": "Product not found in cart."}), 404
    else:
        print("Cart is empty.")
        return jsonify({"error": "Cart is empty."}), 404


@app.route("/place_order", methods=["POST"])
def place_order():
    if "user" not in session:
        flash("You must be logged in to place an order.", "error")
        return redirect(url_for("login"))

    cart_items = session.get("cart", [])

    if not cart_items:
        flash(
            "Your cart is empty. Please add items to your cart before placing an order.",
            "error",
        )
        return redirect(url_for("cart"))

    total_price = sum(item["total_price"] for item in cart_items)
    user_balance = session.get("user_balance", 0)

    if total_price <= user_balance:
        session["user_balance"] -= total_price
        session.pop("cart", None)

        flash("Order placed successfully!", "success")
        return redirect(url_for("index", user_balance=session["user_balance"]))
    else:
        flash("Insufficient balance to place order.", "error")
        return redirect(url_for("cart"))


if __name__ == "__main__":
    app.run(debug=True)
